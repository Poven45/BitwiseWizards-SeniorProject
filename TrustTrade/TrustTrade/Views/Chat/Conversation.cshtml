@model TrustTrade.Models.ViewModels.ChatDetailsVM

@{
    ViewData["Title"] = $"Chat with {Model.OtherUsername}";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card chat-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <a href="@Url.Action("Index")" class="btn btn-outline-primary me-3">
                            <i class="bi bi-arrow-left"></i>
                        </a>
                        @if (Model.OtherUserProfilePicture != null)
                        {
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.OtherUserProfilePicture)"
                                 class="rounded-circle me-2"
                                 style="width: 2.5rem; height: 2.5rem; object-fit: cover; border: 2px solid var(--border-color);"
                                 alt="Profile Picture">
                        }
                        else
                        {
                            <img src="/icons/defpfp.png" class="rounded-circle me-2"
                                 style="width: 2.5rem; height: 2.5rem; object-fit: cover; border: 2px solid var(--border-color);"
                                 alt="Profile Picture">
                        }
                        <div>
                            <h5 class="mb-0">@Model.OtherUsername</h5>
                        </div>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-primary" type="button" id="chatOptionsDropdown"
                                data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-three-dots-vertical"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="chatOptionsDropdown">
                            <li>
                                <a class="dropdown-item"
                                   href="@Url.Action("UserProfile", "Profile", new { username = Model.OtherUsername })">
                                    <i class="bi bi-person me-2"></i> View Profile
                                </a>
                            </li>
                            <li>
                                <button class="dropdown-item" id="archiveConversationBtn"
                                        data-conversation-id="@Model.Conversation.Id">
                                    <i class="bi bi-archive me-2"></i> Archive Conversation
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="card-body chat-body" id="chatMessages">
                    @if (!Model.Messages.Any())
                    {
                        <div class="text-center p-5 chat-empty-state">
                            <i class="bi bi-chat-square-text text-accent mb-3"></i>
                            <h5>No messages yet</h5>
                            <p class="text-accent">Send a message to start the conversation.</p>
                        </div>
                    }
                    else
                    {
                        <div id="messagesList">
                            @foreach (var message in Model.Messages.OrderBy(m => m.CreatedAt))
                            {
                                <div
                                    class="message-container @(message.IsOwnMessage ? "message-outgoing" : "message-incoming")">
                                    @if (!message.IsOwnMessage)
                                    {
                                        <div class="message-avatar">
                                            @if (message.SenderProfilePicture != null)
                                            {
                                                <img
                                                    src="data:image/jpeg;base64,@Convert.ToBase64String(message.SenderProfilePicture)"
                                                    class="rounded-circle" alt="Avatar">
                                            }
                                            else
                                            {
                                                <img src="/icons/defpfp.png" class="rounded-circle" alt="Avatar">
                                            }
                                        </div>
                                    }
                                    <div class="message @(message.IsOwnMessage ? "message-sent" : "message-received")">
                                        <div class="message-content">@message.Content</div>
                                        <div class="message-time">
                                            <small class="@(message.IsOwnMessage ? "text-white-50" : "text-muted")">
                                                @message.CreatedAt.ToString("g")
                                                @if (message.IsOwnMessage && message.IsRead)
                                                {
                                                    <span class="message-status read"><i
                                                            class="bi bi-check2-all"></i></span>
                                                }
                                                else if (message.IsOwnMessage)
                                                {
                                                    <span class="message-status sent"><i
                                                            class="bi bi-check2"></i></span>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="card-footer chat-footer">
                    <form id="messageForm" action="@Url.Action("SendMessage")" method="post">
                        <input type="hidden" name="ConversationId" value="@Model.Conversation.Id"/>
                        <div class="message-input-container">
                            <div class="textarea-container">
                                <textarea id="messageInput" name="Content" class="form-control" rows="1"
                                          placeholder="Type a message..." required></textarea>
                            </div>
                            <div class="send-button-container">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-send"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            @if (Model.TotalPages > 1)
            {
                <div class="mt-3 text-center">
                    <button id="loadMoreBtn" class="btn btn-outline-primary"
                            data-conversation-id="@Model.Conversation.Id" data-current-page="@Model.CurrentPage"
                            data-total-pages="@Model.TotalPages">
                        Load More
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<style>
    body {
        min-height: 40vh;
        margin-bottom: 0;
    }
    </style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Connect to SignalR hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .withAutomaticReconnect()
                .build();

            const conversationId = @Model.Conversation.Id;
            const currentUserId = @Model.CurrentUserId;
            const messagesContainer = document.getElementById('chatMessages');
            let messagesList = document.getElementById('messagesList');
            const messageForm = document.getElementById('messageForm');
            const messageInput = document.getElementById('messageInput');

            // Auto-resize textarea with scrollbar management
            function resizeTextarea() {
                // Reset height to auto
                messageInput.style.height = 'auto';

                // Set the height to match content (with max of 150px)
                const newHeight = Math.min(messageInput.scrollHeight, 150);
                messageInput.style.height = newHeight + 'px';

                // Show scrollbar only if content exceeds max height
                if (messageInput.scrollHeight > 150) {
                    messageInput.style.overflowY = 'auto';
                } else {
                    messageInput.style.overflowY = 'hidden';
                }


            }

            // Add event listeners for textarea resize
            messageInput.addEventListener('input', resizeTextarea);
            messageInput.addEventListener('focus', resizeTextarea);

            // Reset height when message is sent
            messageForm.addEventListener('submit', function (e) {
                // Existing submit code here...

                // Reset height after sending
                setTimeout(function () {
                    messageInput.style.height = 'auto';
                    messageInput.style.overflowY = 'hidden';
                }, 10);
            });

            // Call resize once on page load to handle any existing content
            setTimeout(resizeTextarea, 100);

            // Scroll to bottom of messages
            function scrollToBottom() {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            // Add a new message to the UI
            function addMessageToUI(message) {
                const isOwnMessage = message.senderId === currentUserId;
                const messageHtml = `
        <div class="message-container ${isOwnMessage ? 'message-outgoing' : 'message-incoming'}">
            ${!isOwnMessage ? `
                <div class="message-avatar">
                    ${message.senderProfilePicture ?
                    `<img src="data:image/jpeg;base64,${message.senderProfilePicture}" class="rounded-circle" alt="Avatar">` :
                    `<img src="/icons/defpfp.png" class="rounded-circle" alt="Avatar">`}
                </div>
            ` : ''}
            <div class="message ${isOwnMessage ? 'message-sent' : 'message-received'}">
                <div class="message-content">${message.content}</div>
                <div class="message-time">
                    <small class="${isOwnMessage ? 'text-white-50' : 'text-muted'}">
                        ${new Date(message.createdAt).toLocaleString()}
                        ${isOwnMessage ? '<span class="message-status sent"><i class="bi bi-check2"></i></span>' : ''}
                    </small>
                </div>
            </div>
        </div>
    `;

                if (!messagesList) {
                    messagesContainer.innerHTML = '<div id="messagesList">' + messageHtml + '</div>';
                    // Add this line to update the reference:
                    messagesList = document.getElementById('messagesList');
                } else {
                    messagesList.insertAdjacentHTML('beforeend', messageHtml);
                }

                scrollToBottom();
            }

            // Receive a message from SignalR
            connection.on('ReceiveMessage', function (message) {
                addMessageToUI(message);
            });

            // Handle message read status updates
            connection.on('MessagesRead', function (userId) {
                if (userId !== currentUserId) {
                    // The other user has read your messages
                    document.querySelectorAll('.message-status.sent').forEach(function (status) {
                        status.classList.remove('sent');
                        status.classList.add('read');
                        status.innerHTML = '<i class="bi bi-check2-all"></i>';
                    });
                }
            });

            // Start connection
            connection.start()
                .then(function () {
                    console.log('Connected to chat hub');
                    // Join the conversation group
                    connection.invoke('JoinConversation', conversationId);
                })
                .catch(function (err) {
                    console.error('Error connecting to chat hub:', err);
                });

            // Handle form submission
            messageForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const content = messageInput.value.trim();
                if (!content) return;

                // Send message via SignalR
                connection.invoke('SendMessage', conversationId, content)
                    .catch(function (err) {
                        console.error('Error sending message:', err);
                        // Fallback to traditional form submission
                        messageForm.submit();
                    });

                // Clear input
                messageInput.value = '';
            });

            // Handle archive conversation
            const archiveBtn = document.getElementById('archiveConversationBtn');
            if (archiveBtn) {
                archiveBtn.addEventListener('click', function () {
                    if (confirm('Are you sure you want to archive this conversation?')) {
                        // Leave the conversation in SignalR
                        connection.invoke('LeaveConversation', conversationId);

                        // Send archive request
                        fetch(`/Chat/ArchiveConversation?conversationId=${conversationId}`, {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    window.location.href = '/Chat';
                                } else {
                                    alert('Failed to archive conversation. Please try again.');
                                }
                            })
                            .catch(error => {
                                console.error('Error archiving conversation:', error);
                                alert('An error occurred. Please try again.');
                            });
                    }
                });
            }

            // Handle load more button
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function () {
                    const nextPage = parseInt(this.dataset.currentPage) + 1;
                    const totalPages = parseInt(this.dataset.totalPages);

                    if (nextPage <= totalPages) {
                        window.location.href = `/Chat/Conversation/${conversationId}?page=${nextPage}`;
                    }
                });
            }

            // Mark messages as read when page loads
            connection.invoke('MarkAsRead', conversationId);

            // Scroll to bottom on initial load
            scrollToBottom();

            // Scroll to bottom when window is resized
            window.addEventListener('resize', scrollToBottom);
        });
    </script>
}