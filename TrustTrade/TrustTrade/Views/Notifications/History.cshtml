@model IEnumerable<TrustTrade.Models.Notification>

@{
    ViewData["Title"] = "Notification History";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Notification History</h1>
        <div class="d-flex align-items-center m-1">
            <a asp-action="Index" class="btn btn-outline-primary me-2 my-1">
                <i class="bi bi-bell"></i> View Unread
            </a>
            <form asp-action="ArchiveAll" method="post" class="d-inline" id="archiveAllForm">
                
                <button type="button" class="btn btn-outline-danger" id="archiveAllBtn" @(Model.Any(n => !n.IsArchived) ? "": "disabled")>
                    <i class="bi bi-trash"></i> Clear All
                </button>
            </form>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> You don't have any notifications in your history.
        </div>
    }
    else
    {
        <div class="notification-list">
            @foreach (var notification in Model)
            {
                <div class="card mb-3 notification-item" data-id="@notification.Id">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <!-- Profile picture -->
                            @if (notification.Actor != null && notification.Actor.ProfilePicture != null)
                            {
                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(notification.Actor.ProfilePicture)" 
                                     class="notification-avatar rounded-circle me-3" style="width: 3rem" alt="Profile Picture">
                            }
                            else
                            {
                                <img src="/icons/defpfp.png" class="notification-avatar rounded-circle me-3" style="width: 3rem" alt="Profile Picture">
                            }
                            
                            <!-- Notification content - Make it clickable -->
                            <a href="@Url.Action("RedirectToContent", "Notifications", new { id = notification.Id })" 
                               class="notification-content-link" style="flex-grow: 1; text-decoration: none; color: inherit;">
                                <div class="notification-content">
                                    <p class="mb-1">@Html.Raw(notification.Message)</p>
                                    <small class="text-muted">@TrustTrade.Helpers.TimeAgoHelper.GetTimeAgo(notification.CreatedAt)</small>
                                </div>
                            </a>
                            
                            <!-- Archive/Delete button -->
                            <div class="ms-auto">
                                <button class="btn btn-sm btn-outline-secondary archive-btn" data-id="@notification.Id">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Pagination -->
        @if (ViewBag.TotalPages > 1)
        {
            <nav aria-label="Notification history pagination">
                <ul class="pagination justify-content-center">
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("History", new { page = ViewBag.CurrentPage - 1 })">Previous</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link">Previous</span>
                        </li>
                    }
                    
                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                        <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("History", new { page = i })">@i</a>
                        </li>
                    }
                    
                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("History", new { page = ViewBag.CurrentPage + 1 })">Next</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link">Next</span>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Enhance notification card hover effect
            const notificationItems = document.querySelectorAll('.notification-item');
            notificationItems.forEach(item => {
                item.addEventListener('mouseenter', function() {
                    this.style.backgroundColor = 'rgba(0, 0, 0, 0.03)';
                    this.style.cursor = 'pointer';
                });
                
                item.addEventListener('mouseleave', function() {
                    this.style.backgroundColor = '';
                    this.style.cursor = 'default';
                });
            });
            
            // Prevent click on archive button from triggering redirect
            document.querySelectorAll('.notification-content-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    // Mark as read when clicking to navigate
                    const notificationId = this.closest('.notification-item').getAttribute('data-id');
                    markAsRead(notificationId);
                    // Let the navigation happen naturally
                });
            });
        });
    </script>
}