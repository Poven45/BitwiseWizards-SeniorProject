@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TrustTrade.ViewModels
@model IndexVM

<link rel="stylesheet" href="~/css/index.css" />

@{
    ViewData["Title"] = Model.IsFollowing ? "Following" : "Home Page";
}

<div class="container">
    <div class="row">
        <!-- Main content column -->
        <div class="col-12 col-md-8">
            <!-- Post Filters -->
            <div>
                <partial name="../Posts/_Filters" model="Model.PostFilters" />
            </div>

            <!-- Post Preview Feed -->
            <ul class="list-group mt-4">
                <div id="postFeedContainer" class="mt-5" data-url="@(Model.IsFollowing 
                    ? Url.Action("LoadMoreFollowings", "Posts")
                    : Url.Action("LoadMore", "Posts"))">
                    <partial name="../Posts/_Feed" model="Model.Posts" />
                </div>
            </ul>

            <!-- Pagination Info -->
            <div>
                <partial name="../Posts/_PaginationInfo" />
            </div>
        </div>

        <!-- Financial News sidebar -->
        @if (!Model.IsFollowing)
        {
            <div class="col-md-4 d-none d-md-block">
                <div class="sidebar-widget">
                    <div id="financialNewsWidget">
                        <!-- Initial Loading Spinner -->
                        <div class="loading-spinner text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading financial news...</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const newsWidgetContainer = document.getElementById('financialNewsWidget');

        // Function to load widget content
        function loadNewsWidget(url) {
            if (!newsWidgetContainer) return; // Exit if container not found

            // Show loading state
            newsWidgetContainer.innerHTML = `<div class="loading-spinner text-center p-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Loading financial news...</p></div>`;

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.text();
                })
                .then(html => {
                    newsWidgetContainer.innerHTML = html;
                    // No need to re-attach handlers here because we use delegation
                })
                .catch(error => {
                    console.error('Error loading financial news widget content:', error);
                    newsWidgetContainer.innerHTML =
                        '<div class="alert alert-warning p-3 m-0 border-0">Unable to load financial news at this time.</div>';
                });
        }

        // --- Initial Load ---
        if (newsWidgetContainer) {
            const initialUrl = '@Url.Action("NewsWidget", "FinancialNews")'; // Fetch default (All)
            loadNewsWidget(initialUrl);

            // --- Event Delegation for Tab Clicks ---
            newsWidgetContainer.addEventListener('click', function(event) {
                // Check if the clicked element is a category tab
                const clickedTab = event.target.closest('.category-tab');

                if (clickedTab) {
                    event.preventDefault(); // Prevent default link behavior if any

                    const url = clickedTab.getAttribute('data-url');
                    if (url) {
                        // Visually update active tab immediately (optional, can be done in partial)
                        const allTabs = newsWidgetContainer.querySelectorAll('.category-tab');
                        allTabs.forEach(t => t.classList.remove('active'));
                        clickedTab.classList.add('active');

                        // Load content for the clicked tab
                        loadNewsWidget(url);
                    }
                }
            });
        }
    });
</script>
<script src="~/js/postFeed.js"></script>
<script src="~/js/reportModal.js"></script>
}
