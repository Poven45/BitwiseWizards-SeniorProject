@model IEnumerable<TrustTrade.Models.User>

@if (!Model.Any())
{
    <div class="text-center py-5">
        <i class="bi bi-person-x fs-1 text-secondary"></i>
        <h4 class="mt-3 text-muted">No users found</h4>
    </div>
}
else
{
    <div class="row g-4">
        @foreach (var user in Model)
        {
            <div class="col-md-6 col-lg-4">
                <div class="card user-card h-100 shadow-sm p-3" data-user-id="@user.Id">
                    <div class="d-flex align-items-center">
                        <img src="@(user.ProfilePicture != null 
                            ? $"data:image/jpeg;base64,{Convert.ToBase64String(user.ProfilePicture)}"
                            : "/icons/defpfp.png")"
                             alt="Profile Picture"
                             class="profile-img me-3" />

                        <div class="flex-grow-1">
                            <h5 class="mb-1 fw-semibold">@user.Username</h5>
                            <small class="text-muted">Joined: @user.CreatedAt?.ToString("MMM dd, yyyy")</small>
                        </div>
                    </div>

                    <div class="mt-3 text-end">
                        <a href="@Url.RouteUrl("UserProfileRoute", new { username = user.Username })" 
                           class="btn btn-outline-primary view-profile-btn" 
                           data-user-id="@user.Id">
                            View Profile
                        </a>
                        <form method="post" action="/Chat/StartConversation" style="display: inline;">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="userId" value="@user.Id"/>
                            <button type="submit" class="btn btn-outline-accent ms-2 start-chat-btn" data-user-id="@user.Id">
                                <i class="bi bi-chat-text"></i> Message
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>
}

<script>
    // Direct form submission function
    function createAndSubmitStartConversationForm(userId, buttonElement) {
        console.log('Creating form to start conversation with user ID:', userId);
        
        // Show loading state on the button that was clicked
        if (buttonElement) {
            // Save original button content to restore if needed
            buttonElement.setAttribute('data-original-html', buttonElement.innerHTML);
            // Disable button and show spinner
            buttonElement.disabled = true;
            buttonElement.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Connecting...';
        }
        
        // Create a form to submit
        const form = document.createElement('form');
        form.method = 'post';
        form.action = '/Chat/StartConversation';
        
        // Add CSRF token if the site uses it
        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        if (tokenElement) {
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = tokenElement.value;
            form.appendChild(tokenInput);
        }
        
        // Add the user ID
        const userIdInput = document.createElement('input');
        userIdInput.type = 'hidden';
        userIdInput.name = 'userId';
        userIdInput.value = userId;
        
        // Add to form and submit
        form.appendChild(userIdInput);
        document.body.appendChild(form);
        
        console.log('Submitting form to start conversation...');
        form.submit();
    }
    
    // Initialize any message buttons on this partial view
    document.querySelectorAll('.start-chat-btn, [data-action="start-conversation"]').forEach(button => {
        // For buttons that don't already have an onclick handler
        if (!button.hasAttribute('onclick')) {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const userId = this.getAttribute('data-user-id');
                createAndSubmitStartConversationForm(userId, this); // Pass the button element
            });
        }
    });
    
    // Also handle the regular form submission
    document.querySelectorAll('form[action="/Chat/StartConversation"]').forEach(form => {
        form.addEventListener('submit', function(e) {
            // Prevent the default form submission
            e.preventDefault();
            
            // Find the submit button within this form
            const button = this.querySelector('button[type="submit"]');
            const userId = this.querySelector('input[name="userId"]').value;
            
            // Use our function to handle the submission with loading state
            createAndSubmitStartConversationForm(userId, button);
        });
    });
</script>